import { useTheme } from '@mui/system';
import { Controller, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as Yup from 'yup';
import { Autocomplete, Button, TextField } from '@mui/material';
import { Close } from '@mui/icons-material';
import { useState } from 'react';
import { useEffect } from 'react';
import generateRandomString from 'apps/flow-chart-app/src/utils/randomString';
import { Datagrid, IconComponent } from '@gessa/ui';
export interface IOption {
  label: string;
  value: string;
  disabled?: boolean;
}

const dynamicFields = [
  {
    type: 'text',
    value: [''],
    label: 'database1',
    name: 'database1',
    placeholder: 'Enter database',
    options: [],
    required: true,
    validation: {
      name: 'database1',
      required: true,
      errorMessage: 'database1 required',
      min: 0,
      max: 0,
    },
  },
];

const AddPipeline = (props: any) => {
  const [connectorNameOptions, setConnectorNameOptions] = useState();
  const serilizeDefaultValues = () => {
    const obj: any = { tags: [] };
    const nodes = props.defaultOptions.options;
    if (
      props &&
      props.defaultValues &&
      props.defaultValues.defaultValues &&
      props.defaultValues.defaultValues.length
    ) {
      for (let i = 0; i < props.defaultValues.defaultValues.length; i += 1) {
        if (props.defaultValues.defaultValues[i].key === 'tags') {
          const data = props.defaultValues.defaultValues[i].value.split(',');
          const val = [];
          for (let i = 0; i < data.length; i += 1) {
            if (data[i] !== 'select') {
              const index = nodes.findIndex(
                (value: any) => value.node_id === data[i]
              );
              if (index !== -1) {
                const payload = {
                  label: nodes[index].name,
                  value: data[i],
                };
                val.push(payload);
              }
            }
          }
          obj[props.defaultValues.defaultValues[i].key] = val;
        } else {
          obj[props.defaultValues.defaultValues[i].key] =
            props.defaultValues.defaultValues[i].value;
        }
      }
    }
    return obj;
  };

  const serializeOptions = (data: any): any => {
    const optionArray: IOption[] = [];
    const index = data.findIndex(
      (value: any) => value.type.toLowerCase() === 'connectors'
    );
    if (index !== -1) {
      const connectorList = data[index].children;
      for (let i = 0; i < connectorList.length; i += 1) {
        if (connectorList[i].name) {
          const payload = {
            label: connectorList[i].name,
            value: connectorList[i].name,
          };
          optionArray.push(payload);
        }
      }
    }
    return optionArray;
  };
  useEffect(() => {
    setConnectorNameOptions(
      serializeOptions(props.defaultValues.connectorTypes)
    );
  }, [props.defaultValues]);

  const {
    register,
    handleSubmit,
    reset,
    watch,
    control,
    getValues,
    formState: { errors },
  } = useForm<any>({
    resolver: yupResolver(
      Yup.object().shape({
        name: Yup.string().required('Enter Name'),
        connectorName: Yup.string().required('Select Connector Name'),
        connectorType: Yup.string().required('Select Connector Type'),
        tags: Yup.array(),
        dataFrameName: Yup.string(),
        database1: Yup.string(),

        dataBase: Yup.string().required('Enter Database name'),
        table: Yup.string().required('Enter Table name'),
      })
    ),
    defaultValues: serilizeDefaultValues(),
  });

  const serilizeOptions = (
    nodesData: any,
    elementId: string,
    type: string
  ): IOption[] => {
    const options: IOption[] = [
      { label: 'select', value: 'select', disabled: true },
    ];
    if (type) {
      switch (type.toLowerCase()) {
        case 'input':
          for (let i = 0; i < nodesData.length; i += 1) {
            if (
              nodesData[i].type.toLowerCase() === 'transform' &&
              nodesData[i].name !== '' &&
              nodesData[i].node_id !== elementId
            ) {
              const payload = {
                label: nodesData[i].name,
                value: nodesData[i].node_id,
              };
              options.push(payload);
            }
          }
          return options;
          break;
        case 'transform':
          for (let i = 0; i < nodesData.length; i += 1) {
            if (
              (nodesData[i].type.toLowerCase() === 'transform' ||
                nodesData[i].type.toLowerCase() === 'input') &&
              nodesData[i].name !== '' &&
              nodesData[i].node_id !== elementId
            ) {
              const payload = {
                label: nodesData[i].name,
                value: nodesData[i].node_id,
              };
              options.push(payload);
            }
          }
          return options;
          break;
        case 'store':
          for (let i = 0; i < nodesData.length; i += 1) {
            if (
              nodesData[i].type.toLowerCase() === 'transform' &&
              nodesData[i].name !== '' &&
              nodesData[i].node_id !== elementId
            ) {
              const payload = {
                label: nodesData[i].name,
                value: nodesData[i].node_id,
              };
              options.push(payload);
            }
          }
          break;
      }
      return options;
    }
    return options;
  };

  const [closeStatus, setHandleClose] = useState(false);
  const [options1, setOptions] = useState<IOption[]>(
    serilizeOptions(
      props.defaultOptions.options,
      props.defaultOptions.elementId,
      props.defaultOptions.type
    )
  );

  const handleClose = () => {
    setHandleClose(true);
  };

  const theme = useTheme();

  const connectorTypeOptions = [
    {
      label: 'Input',
      value: 'Input',
    },
    {
      label: 'Store',
      value: 'Store',
    },
  ];

  // const connectorNameOptions = [
  //   {
  //     label: 'Mysql',
  //     value: 'Mysql',
  //   },
  //   {
  //     label: 'Postgres',
  //     value: 'Postgres',
  //   },
  // ];
  const tagOptions = [
    {
      label: 'Tag1',
      value: 'Tag1',
    },
    {
      label: 'vishal',
      value: 'vishal',
    },
    {
      label: 'Tag2',
      value: 'Tag2',
    },
    {
      label: 'Tag2',
      value: 'Tag2',
    },
    {
      label: 'vishal2',
      value: 'vishal2',
    },
    {
      label: 'Tag23',
      value: 'Tag23',
    },
  ];
  const getOptionsRendered = (data: any) => {
    return (
      data &&
      data.length &&
      data.map((myopt: any) => {
        return (
          <option key={generateRandomString()} value={myopt.value}>
            {myopt.label}
          </option>
        );
      })
    );
  };
  const onSubmit = (data: any) => {
    const obj = JSON.parse(JSON.stringify(data));
    if (obj && obj.connectorType.toLowerCase() === 'input') {
      obj.tags = [];
      const payload = {
        type: 'save',
        data: obj,
      };
      props.sendFormData(payload);
    }
    if (obj && obj.connectorType.toLowerCase() === 'store') {
      obj.dataFrameName = '';
      const payload = {
        type: 'save',
        data: obj,
      };
      props.sendFormData(payload);
    }
  };

  const onCancel = () => {
    const payload = {
      type: 'cancel',
      data: false,
    };

    props.sendFormData(payload);
  };

  const onDelete = () => {
    const payload = {
      type: 'delete',
      data: false,
    };
    props.sendFormData(payload);
  };

  // useEffect(() => {
  //   setOptions(
  //     serilizeOptions(
  //       props.defaultOptions.options,
  //       props.defaultOptions.elementId,
  //       watch('connectorType')
  //     )
  //   );
  // }, []);

  const columns = [
    { field: 'id', headerName: 'ID', width: 100 },
    { field: 'firstName', headerName: 'First name', width: 100 },
    { field: 'lastName', headerName: 'Last name', width: 100 },
    {
      field: 'age',
      headerName: 'Age',
      type: 'number',
      width: 100,
    },
    {
      field: 'fullName',
      headerName: 'Full name',
      description: 'This column has a value getter and is not sortable.',
      sortable: false,
      width: 100,
      valueGetter: (params: any) =>
        `${params.getValue(params.id, 'firstName') || ''} ${
          params.getValue(params.id, 'lastName') || ''
        }`,
    },
  ];
  const rows = [
    { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },
    { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },
    { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },
    { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },
    { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },
    { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },
    { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },
    { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },
    { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },
  ];

  return (
    <div className="box box-border flex flex-col relative flex-grow justify-start w-full h-screen overflow-x-hidden overflow-y-hidden">
      <div
        className="flex flex-row justify-between items-center p-2"
        style={{
          borderBottomWidth: '1px',
          borderBottomColor: theme.palette.background.paper,
        }}
      >
        <div>
          <p className="text-xl  leading-8">Add Pipeline</p>
        </div>
        <div>
          <Close className="h-4 " onClick={onCancel} />
        </div>
      </div>
      <div className="relative flex flex-col  gap-5 flex-grow h-full">
        <form
          className="flex flex-col justify-between items-stretch"
          onSubmit={handleSubmit(onSubmit)}
        >
          <div
            className="flex flex-col justify-start items-start flex-grow w-full p-2 overflow-y-auto overflow-x-hidden"
            style={{ height: 'calc(100vh - 105px)' }}
          >
            <div
              className="form-group w-full  py-1 px-0 flex flex-col  gap-2 "
              key={generateRandomString()}
            >
              <label key={generateRandomString()}>Name</label>
              <input
                key={generateRandomString()}
                style={{
                  backgroundColor: theme.palette.background.paper,
                  color: theme.palette.getContrastText(
                    theme.palette.background.paper
                  ),
                }}
                type="text"
                placeholder={'Enter Name'}
                {...register('name')}
                className={`form-control rounded ${
                  errors['name']
                    ? 'is-invalid leading-8 p-2 h-10 text-sm'
                    : ' leading-8 p-2 h-10 text-sm'
                }`}
              />
              <div
                className="invalid-feedback text-red-400"
                key={generateRandomString()}
              >
                {errors['name']?.message}
              </div>
            </div>
            <div
              className="form-group w-full   flex flex-col gap-2"
              key={generateRandomString()}
            >
              <label key={generateRandomString()}>Connector Name</label>
              <select
                className="leading-8 p-2 h-10 text-sm"
                {...register('connectorName')}
                key={generateRandomString()}
                style={{
                  backgroundColor: theme.palette.background.paper,
                  color: theme.palette.getContrastText(
                    theme.palette.background.paper
                  ),
                }}
                placeholder={'Enter Connector Name'}
              >
                {getOptionsRendered(connectorNameOptions)}
              </select>
              <div
                className="invalid-feedback text-red-400"
                key={generateRandomString()}
              >
                {errors['connectorName']?.message}
              </div>
            </div>
            <div
              className="form-group w-full  py-1 px-0 flex flex-col gap-2"
              key={generateRandomString()}
            >
              <label key={generateRandomString()}>Connector Type</label>
              <select
                className="leading-8 p-2 h-10 text-sm"
                {...register('connectorType')}
                key={generateRandomString()}
                style={{
                  backgroundColor: theme.palette.background.paper,
                  color: theme.palette.getContrastText(
                    theme.palette.background.paper
                  ),
                }}
                placeholder={'Enter Connector Type'}
              >
                {getOptionsRendered(connectorTypeOptions)}
              </select>
              <div
                className="invalid-feedback text-red-400"
                key={generateRandomString()}
              >
                {errors['connectorType']?.message}
              </div>
            </div>
            {(!watch('connectorType') ||
              watch('connectorType').toLowerCase() === 'input') && (
              <div
                className="form-group w-full  py-1 px-0 flex flex-col gap-2"
                key={generateRandomString()}
              >
                <label key={generateRandomString()}>Data Frame Name</label>
                <input
                  key={generateRandomString()}
                  style={{
                    backgroundColor: theme.palette.background.paper,
                    color: theme.palette.getContrastText(
                      theme.palette.background.paper
                    ),
                  }}
                  type="text"
                  placeholder={'Enter Data Frame Name'}
                  {...register('dataFrameName')}
                  className={`form-control rounded ${
                    errors['name']
                      ? 'is-invalid leading-8 p-2 h-10 text-sm'
                      : ' leading-8 p-2 h-10 text-sm'
                  }`}
                />
                <div
                  className="invalid-feedback text-red-400"
                  key={generateRandomString()}
                >
                  {errors['dataFrameName']?.message}
                </div>
              </div>
            )}
            {watch('connectorType') &&
              watch('connectorType').toLowerCase() === 'store' && (
                // setOptions(
                //   serilizeOptions(
                //     props.defaultOptions.options,
                //     props.defaultOptions.elementId,
                //     watch('connectorType')
                //   )
                // ) &&
                <div
                  className="form-group w-full  py-1 px-0 flex flex-col gap-2"
                  key={generateRandomString()}
                >
                  <Controller
                    name="tags"
                    control={control}
                    defaultValue={[]}
                    render={({
                      field: { ref, ...field },
                      fieldState: { error },
                    }) => (
                      <Autocomplete
                        {...field}
                        disableClearable
                        disablePortal
                        filterSelectedOptions
                        multiple
                        getOptionDisabled={(option) => option.disabled}
                        getOptionLabel={(option) => option.label}
                        id="days-autocomplete"
                        onChange={(event, value) => field.onChange(value)}
                        options={options1}
                        renderInput={(params) => (
                          <TextField
                            label="Select tags"
                            name="tags"
                            type="search"
                            inputRef={ref}
                            {...params}
                          />
                        )}
                      />
                    )}
                  />
                  <div
                    className="invalid-feedback text-red-400"
                    key={generateRandomString()}
                  >
                    {errors['tags']?.message}
                  </div>
                </div>
              )}
            <div className="border-b-2"></div>
            <div className="flex flex-row justify-between items-center ">
              <div>
                <p className="text-xl  leading-8">Properties</p>
              </div>
            </div>
            <form
              className="flex flex-col justify-between items-stretch"
              onSubmit={handleSubmit(onSubmit)}
            >
              {dynamicFields &&
                dynamicFields.length &&
                dynamicFields.map((field: any) => {
                  return (
                    <div
                      className="form-group w-full  py-1 px-0 flex flex-col  gap-2"
                      key={generateRandomString()}
                    >
                      <label key={generateRandomString()}>{field.label}</label>
                      <input
                        key={generateRandomString()}
                        style={{
                          backgroundColor: theme.palette.background.paper,
                          color: theme.palette.getContrastText(
                            theme.palette.background.paper
                          ),
                        }}
                        type="text"
                        placeholder={field.placeholder}
                        {...register(field.name)}
                        className={`form-control rounded ${
                          errors[field.name]
                            ? 'is-invalid leading-8 p-2 h-10 text-sm'
                            : ' leading-8 p-2 h-10 text-sm'
                        }`}
                      />
                      <div
                        className="invalid-feedback text-red-400"
                        key={generateRandomString()}
                      >
                        {errors[field.name]?.message}
                      </div>
                    </div>
                  );
                })}
            </form>
            <div
              className="form-group w-full  py-1 px-0 flex flex-col  gap-2"
              key={generateRandomString()}
            >
              <label key={generateRandomString()}>Database</label>
              <input
                key={generateRandomString()}
                style={{
                  backgroundColor: theme.palette.background.paper,
                  color: theme.palette.getContrastText(
                    theme.palette.background.paper
                  ),
                }}
                type="text"
                placeholder={'Enter Database name'}
                {...register('dataBase')}
                className={`form-control rounded ${
                  errors['name']
                    ? 'is-invalid leading-8 p-2 h-10 text-sm'
                    : ' leading-8 p-2 h-10 text-sm'
                }`}
              />
              <div
                className="invalid-feedback text-red-400"
                key={generateRandomString()}
              >
                {errors['dataBase']?.message}
              </div>
            </div>
            <div
              className="form-group w-full  py-1 px-0 flex flex-col flex-grow gap-2"
              key={generateRandomString()}
            >
              <label key={generateRandomString()}>Table</label>
              <input
                key={generateRandomString()}
                style={{
                  backgroundColor: theme.palette.background.paper,
                  color: theme.palette.getContrastText(
                    theme.palette.background.paper
                  ),
                }}
                type="text"
                placeholder={'Enter Table Name'}
                {...register('table')}
                className={`form-control rounded ${
                  errors['name']
                    ? 'is-invalid leading-8 p-2 h-10 text-sm'
                    : ' leading-8 p-2 h-10 text-sm'
                }`}
              />
              <div
                className="invalid-feedback text-red-400"
                key={generateRandomString()}
              >
                {errors['table']?.message}
              </div>
            </div>
            <div className="flex flex-col w-full">
              <div className="form-group flex flex-row justify-end items-center gap-2">
                <Button
                  variant="outlined"
                  type="submit"
                  className="h-9 text-sm py-2.5 px-6"
                  onClick={onDelete}
                >
                  Test
                </Button>
              </div>
            </div>
            <div
              className="w-full "
              style={{
                backgroundColor: theme.palette.background.paper,
                color: theme.palette.getContrastText(
                  theme.palette.background.paper
                ),
                height: '300px',
              }}
            >
              <Datagrid rows={rows} columns={columns} />
            </div>
          </div>
          <div className="flex flex-col w-full bottom-0 absolute">
            <div
              className="form-group flex flex-row justify-end items-center gap-2 p-2"
              style={{
                borderTopWidth: '1px',
                borderTopColor: theme.palette.background.paper,
              }}
            >
              <Button
                variant="outlined"
                type="reset"
                className="h-9 text-sm py-2.5 px-6"
                onClick={onDelete}
              >
                <IconComponent
                  name={'Trash'}
                  size={25}
                  label={'Trash'}
                ></IconComponent>
                Delete
              </Button>
              <Button
                variant="outlined"
                type="reset"
                className="h-9 text-sm py-2.5 px-6"
                onClick={onCancel}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                variant="contained"
                value={'Save'}
                className="h-9 text-sm py-2.5 px-6"
              >
                Save
              </Button>
            </div>
          </div>
        </form>
      </div>
      <div>{/* buttons save cancel */}</div>
    </div>
  );
};
export default AddPipeline;
