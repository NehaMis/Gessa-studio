import { configureStore, combineReducers } from '@reduxjs/toolkit';
import projects, {
  IRProjects,
} from '../app/pages/projects/store/projectsSlice';
import axios from 'axios';
import { IRProjectContentTree } from '../app/pages/projects/store/projectContentTreeSlice';
import project from '../app/pages/projects/store';
import { IRProjectTabs } from '../app/pages/projects/store/projectTabSlice';
import { getMicrofrontend } from '../micro-frontend';
import MFFlowChartApp from '../micro-frontend/remotes/flow-chart-app';
// import chartDataObj from getMicrofrontend(
//   MFFlowChartApp.url,
//   MFFlowChartApp.scope,
//   MFFlowChartApp.slices.default
// );

// @ts-ignore
import chartDataObj from 'flowChartApp/FlowChartSlice';
// const chartDataObj: any =
// getMicrofrontend(
//   MFFlowChartApp.url,
//   MFFlowChartApp.scope,
//   MFFlowChartApp.slices.default
// ).then((data) => {
//   console.log('MFFFFF', data);
// });

export interface IRootState {
  project: {
    projects: IRProjects;
    projectTabs: IRProjectTabs;
    projectContentTree: IRProjectContentTree;
  };
}

const reducers: any = {
  project,
};

const lazyLoadReducers = async () => {
  const chartDataObj = await getMicrofrontend(
    MFFlowChartApp.url,
    MFFlowChartApp.scope,
    MFFlowChartApp.slices.default
  );

  if (chartDataObj) {
    reducers['chartDataObj'] = chartDataObj;
  }

  
  rootStore = configureStore({
    reducer: combineReducers(reducers),
    middleware: (getDefaultMiddleware) =>
      getDefaultMiddleware({
        thunk: {
          extraArgument: {
            axios,
          },
        },
      }),
  });
};

let rootStore = configureStore({
  reducer: combineReducers(
    reducers
    // {
    //   project,
    //   // chartDataObj,
    // }
  ),
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      thunk: {
        extraArgument: {
          axios,
        },
      },
    }),
});

lazyLoadReducers();

export default rootStore;
